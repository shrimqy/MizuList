// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // Uses connection pooling
  url      = env("DATABASE_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

// Enums
enum Role {
  USER
  ADMIN
}

// Models

model User {
  id            String   @id @default(uuid())
  username      String   @unique
  passwordHash  String
  userAuthToken String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  avatar        String?
  bio           String?

  role         Role
  followedBy   User[]         @relation("UserFollows")
  following    User[]         @relation("UserFollows")
  bookCategory BookCategory[] @relation("UserBookCategory")

  reviews           Review[]
  userBooks         UserBook[]
  activity          Activity[]
  likes             Like[]     @relation("UserLikes")
  dislike           Dislike[]  @relation("UserDislikes")
  comment           Comment[]
  favorite          Favorite[]
  status            Status[]
  thread            Thread[]
  viewedThreads     Thread[]   @relation("ViewedThreads")
  subscribedThreads Thread[]   @relation("SubscribedThreads")
}

model BookCategory {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  userBook UserBook[] @relation("BookCategory")
  user     User[]     @relation("UserBookCategory")
  activity Activity[]
}

model Favorite {
  id     String @id @default(uuid())
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookId String
  user   User[]
}

model Book {
  id          String   @id
  bookId      String?
  title       String?
  synonyms    String[]
  authors     String?
  description String?
  format      String?
  isbn        String[]
  pages       String?
  chapters    String?
  views       Int?

  links          String[]
  coverUrl       String[]
  publicRating   Float?
  ratingCount    Int?
  firstPublished DateTime?
  publishers     String[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  tag               Tag[]
  genres            Genres[]
  userBooks         UserBook[]
  seriesBook        SeriesBook[]
  favorite          Favorite[]
  review            Review[]
  activity          Activity[]
  recommendedBooks1 Recommendation[] @relation("Book1Recommendations")
  recommendedBooks2 Recommendation[] @relation("Book2Recommendations")
  thread            Thread[]         @relation("BookThread")
}

model Series {
  id          String       @id
  name        String       @unique
  description String?
  seriesBook  SeriesBook[]
}

model SeriesBook {
  series   Series @relation(fields: [seriesId], references: [id], onUpdate: Cascade)
  seriesId String
  book     Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId   String
  order    Int?

  @@id([bookId, seriesId])
}

model Genres {
  id    Int    @id @default(autoincrement())
  label String
  book  Book[]
}

model Tag {
  id   Int    @id @default(autoincrement())
  Tag  String
  book Book[]
}

model UserBook {
  id           String         @id @default(uuid())
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String
  book         Book           @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookId       String
  bookCategory BookCategory[] @relation("BookCategory")

  pagesRead    String?
  chaptersRead String?
  rating       String?
  rereads      String?
  notes        String?
  startedDate  DateTime?
  lastUpdated  DateTime? @updatedAt
  completedAt  DateTime?

  @@unique([userId, bookId]) // Ensures a user has only one entry per book
}

model Review {
  id             String   @id @default(uuid())
  date           DateTime @updatedAt
  review         String
  recommendation String
  spoiler        String
  rating         String?
  title          String?

  book   Book    @relation(fields: [bookID], references: [id])
  bookID String
  user   User?   @relation(fields: [userID], references: [id])
  userID String?
}

model Activity {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  chapter   String?
  rating    String?
  title     String?
  pages     String?

  book       Book          @relation(fields: [bookID], references: [id])
  bookID     String
  user       User?         @relation(fields: [userID], references: [id])
  userID     String?
  category   BookCategory? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  comments Comment[]
  like     Like?     @relation(fields: [likeId], references: [id])
  likeId   String?
}

model Status {
  id        String   @id @default(uuid())
  text      String?
  timestamp DateTime @default(now())

  user     User      @relation(fields: [userID], references: [id])
  userID   String
  like     Like?     @relation(fields: [likeId], references: [id])
  likeId   String?
  comments Comment[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime? @default(now())

  children  Comment[] @relation("Comment_Children")
  parent    Comment?  @relation("Comment_Children", fields: [parent_id], references: [id])
  parent_id Int?

  user       User      @relation(fields: [userId], references: [id])
  userId     String
  status     Status?   @relation(fields: [statusId], references: [id])
  statusId   String?
  activity   Activity? @relation(fields: [activityId], references: [id])
  activityId String?
  like       Like[]
  thread     Thread?   @relation(fields: [threadId], references: [id])
  threadId   String?
}

model Recommendation {
  id        String   @id @default(uuid())
  book1     Book     @relation("Book1Recommendations", fields: [book1Id], references: [id])
  book1Id   String
  book2     Book     @relation("Book2Recommendations", fields: [book2Id], references: [id])
  book2Id   String
  like      Like?    @relation(fields: [likeId], references: [id])
  likeId    String?
  dislike   Dislike? @relation(fields: [dislikeId], references: [id])
  dislikeId String?
}

model Like {
  id             String           @id @default(cuid())
  comment        Comment?         @relation(fields: [commentId], references: [id])
  commentId      Int?
  user           User[]           @relation("UserLikes")
  activity       Activity[]
  status         Status[]
  recommendation Recommendation[]
}

model Dislike {
  id             String           @id @default(cuid())
  recommendation Recommendation[]
  user           User[]           @relation("UserDislikes")
}

model Thread {
  id          String    @id
  title       String
  views       Int?      @default(0)
  threadBody  String?
  isPinned    Boolean?  @default(false)
  isLocked    Boolean?  @default(false)
  createdAt   DateTime? @default(now())
  lastUpdated DateTime? @updatedAt

  category        ThreadCategory[]
  book            Book[]           @relation("BookThread")
  comment         Comment[]
  user            User?            @relation(fields: [userId], references: [id])
  userId          String?
  viewedBy        User[]           @relation("ViewedThreads")
  subscribedUsers User[]           @relation("SubscribedThreads")
}

model ThreadCategory {
  id     Int      @id @default(autoincrement())
  name   String?
  color  String?
  thread Thread[]
}
